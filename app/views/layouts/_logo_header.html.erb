<nav class="navbar navbar-default">
  <div id="blue-nav" class="tertiary-nav">
    <div class="container-fluid">
      <nav>
        <ul class="nav navbar-nav navbar-left hidden-xs">
            <li class="dropdown dropdown-large">
              <a class="dropdown-toggle" data-toggle="dropdown" href="#">Media <b class="caret"></b></a>
            <!--
              jQuery-menu-aim: this <ul> defines the dropdown main menu and its contents.
              This is just one of many possible examples for defining the menu's HTML.
              jQuery-menu-aim is agnostic to your HTML structure, it only fires events to
              be used as you please.
            -->
              <ul class="dropdown-menu" role="menu">
                  <li class="media-toggle"><%= link_to 'View All'.html_safe, root_path %></li>
                  <li class="media-toggle"><%= link_to 'Videos'.html_safe, video_players_path %></li>
                  <li class="media-toggle"><%= link_to 'Websites'.html_safe, websites_path %></li> 
                  <li class="media-toggle"><%= link_to 'Social Media'.html_safe, socials_path %></li>
                  <li class="media-toggle"><%= link_to 'Logos'.html_safe, logos_path %></li>
                  <li class="media-toggle"><%= link_to 'Maps'.html_safe, maps_path %></li>
                  <li class="media-toggle"><%= link_to 'Reviewtube'.html_safe, reviewtubes_path %></li>
                  <li class="media-toggle"><%= link_to 'Banners'.html_safe, banners_path %></li>
        		  </ul>
        		</li>
          
          <li class="dropdown dropdown-large">
          <a class="dropdown-toggle" data-toggle="dropdown" href="#">Categories <b class="caret"></b></a>
          <!--
            jQuery-menu-aim: this <ul> defines the dropdown main menu and its contents.
            This is just one of many possible examples for defining the menu's HTML.
            jQuery-menu-aim is agnostic to your HTML structure, it only fires events to
            be used as you please.
          -->
          <ul class="dropdown-menu" role="menu">
           
              <% VerticalCategory.all.order(title: 'ASC').each do |category| %>
               <li data-submenu-id="submenu_<%= category.id %>_verticals" style="border-top: 1px solid #4e4e4e;">
                <a class="vertical-toggle" data-target="category_<%= category.id %>_verticals" style="padding-top: 10px; padding-bottom: 10px;"><%= category.title %></a>

    				  	<div id="submenu_<%= category.id %>_verticals" class="popover" style="width: 400px; padding-top: 10px; padding-bottom: 10px;">

                    <ul id="category_<%= category.id %>_verticals" style="padding-left: 0px; margin-top: 7px;">
            					<% category.verticals.each do |vertical| %>
            						<li class="cat-toggle">
            							<%= link_to vertical.title, params.merge(vertical: vertical.title) %>
            						</li>
            					<% end %>
                    </ul>
                   
                </div>
              
            </li>
             <% end %>
             </li>
    	  	</ul>
        		
        		<li class="dropdown dropdown-large hidden-lg hidden-md">
              <a class="dropdown-toggle" data-toggle="dropdown" href="#">Tags <b class="caret"></b></a>
              <ul class="dropdown-menu" role="menu">
                  <li><%= link_to "View All",   params.merge(tag: nil) %></li>
                <% ActsAsTaggableOn::Tag.joins(:taggings).where('taggings.taggable_type = ?', 'Logo').uniq(:name).most_used(10).each do |tag| %>
                  <li><%= link_to tag.name,   params.merge(tag: tag.name) %></li>
                <% end %>
        		  </ul>
        		</li>
        		
    	  	<li class="hidden-xs hidden-sm"><p>TAGS <%= fa_icon "angle-right" %></p></li>
          <li class="hidden-xs hidden-sm"><%= link_to "View All",   params.merge(tag: nil) %></li>
          <% ActsAsTaggableOn::Tag.joins(:taggings).where('taggings.taggable_type = ?', 'Logo').uniq(:name).most_used(10).each do |tag| %>
            <li class="hidden-xs hidden-sm"><%= link_to tag.name,   params.merge(tag: tag.name) %></li>
          <% end %>
    		</ul>
    		

    		
    		
    		<ul class="nav navbar-nav navbar-right">
    			<li>
            <%= form_tag(root_path, :method => "get", class: 'navbar-form navbar-left') do %>  
              <div class="input-group">  
                <%= search_field_tag :keywords, params[:keywords], placeholder: "Search", class: "form-control" %>  
                <div class="input-group-btn">  
                  <%= button_tag "", :class => 'btn btn-info glyphicon glyphicon-search',:name => nil%>  
                </div>  
              </div>  
            <% end %>
          </li>
    		</ul>
      </nav>
    </div>
  </div>
</nav>

<script>
  var $menu = $(".dropdown-menu");

  // jQuery-menu-aim: <meaningful part of the example>
  // Hook up events to be fired on menu row activation.
  $menu.menuAim({
      activate: activateSubmenu,
      deactivate: deactivateSubmenu
  });
  // jQuery-menu-aim: </meaningful part of the example>

  // jQuery-menu-aim: the following JS is used to show and hide the submenu
  // contents. Again, this can be done in any number of ways. jQuery-menu-aim
  // doesn't care how you do this, it just fires the activate and deactivate
  // events at the right times so you know when to show and hide your submenus.
  function activateSubmenu(row) {
      var $row = $(row),
          submenuId = $row.data("submenuId"),
          $submenu = $("#" + submenuId),
          height = $menu.outerHeight(),
          width = $menu.outerWidth();

      // Show the submenu
      $submenu.css({
          display: "block",
          top: -1,
          left: width - 3,  // main should overlay submenu
          height: height - 4  // padding for main dropdown's arrow
      });

      // Keep the currently activated row's highlighted look
      $row.find("a").addClass("maintainHover");
  }

  function deactivateSubmenu(row) {
      var $row = $(row),
          submenuId = $row.data("submenuId"),
          $submenu = $("#" + submenuId);

      // Hide the submenu and remove the row's highlighted look
      $submenu.css("display", "none");
      $row.find("a").removeClass("maintainHover");
  }

  // Bootstrap's dropdown menus immediately close on document click.
  // Don't let this event close the menu if a submenu is being clicked.
  // This event propagation control doesn't belong in the menu-aim plugin
  // itself because the plugin is agnostic to bootstrap.
  $(".dropdown-menu li").click(function(e) {
      e.stopPropagation();
  });

  $(document).click(function() {
      // Simply hide the submenu on any click. Again, this is just a hacked
      // together menu/submenu structure to show the use of jQuery-menu-aim.
      $(".popover").css("display", "none");
      $("a.maintainHover").removeClass("maintainHover");
  });

</script>